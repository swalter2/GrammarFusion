module SkelABNF where

-- Haskell module generated by the BNF converter

import AbsABNF
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transGrammar :: Grammar -> Result
transGrammar x = case x of
  Grammar defs  -> failure x


transDef :: Def -> Result
transDef x = case x of
  Header  -> failure x
  Root var  -> failure x
  Rule lhs fragments  -> failure x


transLHS :: LHS -> Result
transLHS x = case x of
  Internal var  -> failure x
  Public var  -> failure x


transFragment :: Fragment -> Result
transFragment x = case x of
  Fragment items  -> failure x


transItem :: Item -> Result
transItem x = case x of
  Terminal id  -> failure x
  NonTerminal var  -> failure x
  Option choices  -> failure x
  Group choices  -> failure x


transChoice :: Choice -> Result
transChoice x = case x of
  Choice items  -> failure x


transVar :: Var -> Result
transVar x = case x of
  Var id  -> failure x



